/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.me73.lunch.forms;

import eu.me73.lunch.classes.Order;
import eu.me73.lunch.exports.Printings;
import eu.me73.lunch.inout.ExportToFile;
import eu.me73.lunch.inout.Import;
import eu.me73.lunch.inout.ImportFromOldVersion;
import eu.me73.lunch.other.ApplicationContext;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author batky
 */
public class Administration extends javax.swing.JFrame {
    
    private static final Logger log = LoggerFactory.getLogger(Administration.class);
    private static final ApplicationContext applicationContext = ApplicationContext.getInstance();
    private Import oldImport;
    ArrayList<Order> daysOrders;
    boolean newButtonSave;

    /**
     * Creates new form Administration
     */
    public Administration() {
        newButtonSave = false;
        initComponents();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commandPanel = new javax.swing.JPanel();
        actualMonthLabel = new javax.swing.JLabel();
        actualMonthLabelShowing = new javax.swing.JLabel();
        workingMonthLabel = new javax.swing.JLabel();
        monthSelectionComboBox = new javax.swing.JComboBox();
        pathToOriginalDataLabel = new javax.swing.JLabel();
        pathToOriginalData = new javax.swing.JTextField();
        pathToNewData = new javax.swing.JTextField();
        pathToNewDataLabel = new javax.swing.JLabel();
        exportToOlympLabel = new javax.swing.JLabel();
        pathToOlympExport = new javax.swing.JTextField();
        exportToExcelLabel = new javax.swing.JLabel();
        pathToExcelData = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        loadOldDataButton = new javax.swing.JButton();
        loadNewDataButton = new javax.swing.JButton();
        exportToOlympButton = new javax.swing.JButton();
        exportToExcelButton = new javax.swing.JButton();
        additionalPanel = new javax.swing.JPanel();
        workingDayLabel = new javax.swing.JLabel();
        selectedDayComboBox = new javax.swing.JComboBox();
        numberOfLunchiesLabel = new javax.swing.JLabel();
        numberOfLunchiesLabelShowing = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allUsersList = new javax.swing.JList();
        allPeopleLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        actualPeopleList = new javax.swing.JList();
        actualPeopleListLabel = new javax.swing.JLabel();
        changeLunchButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        commandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        actualMonthLabel.setText("Dnešný dátum:");

        actualMonthLabelShowing.setText("--");

        workingMonthLabel.setText("Spracovávaný mesiac:");

        monthSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Január", "Február", "Marec", "Apríl", "Máj", "Jún", "Júl", "August", "September", "Október", "November", "December" }));
        monthSelectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthSelectionComboBoxActionPerformed(evt);
            }
        });

        pathToOriginalDataLabel.setText("Cesta ku pôvodným dátam:");

        pathToNewDataLabel.setText("Adresár pre ukladanie upravených dát:");

        exportToOlympLabel.setText("Export do olympu:");

        exportToExcelLabel.setText("Export do excelu:");

        loadOldDataButton.setText("Nacitaj");
        loadOldDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadOldDataButtonActionPerformed(evt);
            }
        });

        loadNewDataButton.setText("Nacitaj");
        loadNewDataButton.setEnabled(false);
        loadNewDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadNewDataButtonActionPerformed(evt);
            }
        });

        exportToOlympButton.setText("Exportuj");
        exportToOlympButton.setEnabled(false);
        exportToOlympButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToOlympButtonActionPerformed(evt);
            }
        });

        exportToExcelButton.setText("Exportuj");
        exportToExcelButton.setEnabled(false);
        exportToExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToExcelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout commandPanelLayout = new javax.swing.GroupLayout(commandPanel);
        commandPanel.setLayout(commandPanelLayout);
        commandPanelLayout.setHorizontalGroup(
            commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, commandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, commandPanelLayout.createSequentialGroup()
                        .addComponent(actualMonthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(actualMonthLabelShowing))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, commandPanelLayout.createSequentialGroup()
                        .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(workingMonthLabel)
                            .addComponent(pathToOriginalDataLabel)
                            .addComponent(pathToNewDataLabel)
                            .addComponent(exportToOlympLabel)
                            .addComponent(exportToExcelLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pathToExcelData)
                            .addComponent(pathToOlympExport)
                            .addComponent(pathToNewData)
                            .addComponent(monthSelectionComboBox, 0, 351, Short.MAX_VALUE)
                            .addComponent(pathToOriginalData))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exportToOlympButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadNewDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadOldDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportToExcelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        commandPanelLayout.setVerticalGroup(
            commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commandPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualMonthLabel)
                    .addComponent(actualMonthLabelShowing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workingMonthLabel)
                    .addComponent(monthSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathToOriginalDataLabel)
                    .addComponent(pathToOriginalData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadOldDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathToNewDataLabel)
                    .addComponent(pathToNewData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadNewDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportToOlympLabel)
                    .addComponent(pathToOlympExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportToOlympButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportToExcelLabel)
                    .addComponent(pathToExcelData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportToExcelButton)))
        );

        additionalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        workingDayLabel.setText("Deň spracovania:");

        selectedDayComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        selectedDayComboBox.setEnabled(false);
        selectedDayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedDayComboBoxActionPerformed(evt);
            }
        });

        numberOfLunchiesLabel.setText("Počet obedov na vybraný deň:");

        numberOfLunchiesLabelShowing.setText("0");

        jScrollPane1.setViewportView(allUsersList);

        allPeopleLabel.setText("Zoznam všetkých stravníkov:");

        jScrollPane2.setViewportView(actualPeopleList);

        actualPeopleListLabel.setText("Zoznam aktuálnych obedov:");

        changeLunchButton.setText("Zameň obed");
        changeLunchButton.setEnabled(false);

        javax.swing.GroupLayout additionalPanelLayout = new javax.swing.GroupLayout(additionalPanel);
        additionalPanel.setLayout(additionalPanelLayout);
        additionalPanelLayout.setHorizontalGroup(
            additionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(additionalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(additionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(additionalPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(additionalPanelLayout.createSequentialGroup()
                        .addComponent(workingDayLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfLunchiesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfLunchiesLabelShowing)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(additionalPanelLayout.createSequentialGroup()
                        .addComponent(allPeopleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actualPeopleListLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                        .addComponent(changeLunchButton)))
                .addContainerGap())
        );
        additionalPanelLayout.setVerticalGroup(
            additionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, additionalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(additionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workingDayLabel)
                    .addComponent(selectedDayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberOfLunchiesLabel)
                    .addComponent(numberOfLunchiesLabelShowing))
                .addGap(18, 18, 18)
                .addGroup(additionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allPeopleLabel)
                    .addComponent(actualPeopleListLabel)
                    .addComponent(changeLunchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(additionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        closeButton.setText("Zavri");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commandPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(additionalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(commandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(additionalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        log.trace("Close button action performed");
        this.closingMe();
        log.debug("Disposing window, number of frames: {}", Administration.getFrames().length);        
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void closingMe(){
        log.trace("Main form is closing");
        if (dataChanged()) {
            log.debug("Data inside form has been changed trying to save to properties into {}", applicationContext.getPathToIniFile());
            applicationContext.setExportToExcel(pathToExcelData.getText());
            applicationContext.setExportToOlymp(pathToOlympExport.getText());
            applicationContext.setPathToNewData(pathToNewData.getText());
            applicationContext.setPathToOldData(pathToOriginalData.getText());
            applicationContext.setLastWorkingMonth(monthSelectionComboBox.getSelectedIndex() + 1);
            applicationContext.saveContextToFile();
        } else {
            log.debug("Data inside form has not been changed nothing to save");
        }        
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        log.trace("Main window opened");
        log.debug("Loading application properties from file: {}", applicationContext.getPathToIniFile());
        actualMonthLabelShowing.setText(
                LocalDate
                        .now()
                        .format(DateTimeFormatter.ofPattern("dd.MMMM.YYYY", Locale.forLanguageTag("sk")))
                        .toLowerCase());
        pathToOriginalData.setText(applicationContext.getPathToOldData());
        pathToNewData.setText(applicationContext.getPathToNewData());
        pathToOlympExport.setText(applicationContext.getExportToOlymp());
        pathToExcelData.setText(applicationContext.getExportToExcel());
        monthSelectionComboBox.setSelectedIndex(applicationContext.getLastWorkingMonth() - 1);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.closingMe();
    }//GEN-LAST:event_formWindowClosing

    private int getMonth(){
        return monthSelectionComboBox.getSelectedIndex() + 1;
    }
    
    private int getDay(){
        return selectedDayComboBox.getSelectedIndex() + 1;
    }
    
    private int getYear(){
        return LocalDate.now().getYear();
    }       
    
    private void setListBoxes(){
        LocalDate ld;   
        allUsersList.setListData(oldImport.getAllPersonsSortedSK().toArray());
        try {
            ld = LocalDate.of(
                    getYear(),
                    getMonth(),
                    getDay());
            daysOrders = oldImport.getOrdersByDate(ld);
        } catch (Exception e) {
            log.error(e.getMessage());
        }
        actualPeopleList.setListData(daysOrders.toArray());
        numberOfLunchiesLabelShowing.setText(String.valueOf(daysOrders.size()));
    }
    
    private void loadOldDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadOldDataButtonActionPerformed
        log.trace("loadOldDataButton action performed");
        oldImport = new ImportFromOldVersion(pathToOriginalData.getText());
        oldImport.setReload(false);
        log.debug("Loading all persons from {}", oldImport.getPersonFile());
        log.debug("Getting {} persons", oldImport.getAllPersons().size());        
        log.trace("Disabling/Enabling buttons and components");
        loadOldDataButton.setEnabled(false);        
        loadNewDataButton.setEnabled(true);
        loadNewDataButton.setText("Ulož");
        newButtonSave = true;
        selectedDayComboBox.setEnabled(true);
        numberOfLunchiesLabelShowing.setEnabled(true);
        exportToOlympButton.setEnabled(true);
        exportToExcelButton.setEnabled(true);
        setListBoxes();
    }//GEN-LAST:event_loadOldDataButtonActionPerformed

    private void selectedDayComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedDayComboBoxActionPerformed
        setListBoxes();
    }//GEN-LAST:event_selectedDayComboBoxActionPerformed

    private void monthSelectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthSelectionComboBoxActionPerformed
        if (selectedDayComboBox.isEnabled()) {
            setListBoxes();
        }
    }//GEN-LAST:event_monthSelectionComboBoxActionPerformed

    private void exportToOlympButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToOlympButtonActionPerformed
        Printings print = new Printings(oldImport);
        print.ExportToOlymp(pathToOlympExport.getText(), LocalDate.of(getYear(), getMonth(), 1));
    }//GEN-LAST:event_exportToOlympButtonActionPerformed

    private void exportToExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToExcelButtonActionPerformed
        Printings print = new Printings(oldImport);
        print.Monthly(pathToExcelData.getText(), LocalDate.of(getYear(), getMonth(), 1), false);
    }//GEN-LAST:event_exportToExcelButtonActionPerformed

    private void loadNewDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadNewDataButtonActionPerformed
        if (newButtonSave) {
            ExportToFile export = new ExportToFile(pathToNewData.getText());
            export.savePersons(oldImport.getAllPersons());
            export.saveOrders(oldImport.getAllOrders());
            export.saveDays(oldImport.getAllDays());
            export.savePrices(oldImport.getPrices());
        }
    }//GEN-LAST:event_loadNewDataButtonActionPerformed

    private boolean dataChanged(){
        if (monthSelectionComboBox.getSelectedIndex() + 1 != applicationContext.getLastWorkingMonth())
            return true;
        if (!pathToOriginalData.getText().equals(applicationContext.getPathToOldData()))
            return true;
        if (!pathToNewData.getText().equals(applicationContext.getPathToNewData()))
            return true;
        if (!pathToExcelData.getText().equals(applicationContext.getExportToExcel()))
            return true;
        return !pathToOlympExport.getText().equals(applicationContext.getExportToOlymp());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        log.trace("Starting application: Administration");

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Administration().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actualMonthLabel;
    private javax.swing.JLabel actualMonthLabelShowing;
    private javax.swing.JList actualPeopleList;
    private javax.swing.JLabel actualPeopleListLabel;
    private javax.swing.JPanel additionalPanel;
    private javax.swing.JLabel allPeopleLabel;
    private javax.swing.JList allUsersList;
    private javax.swing.JButton changeLunchButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JButton exportToExcelButton;
    private javax.swing.JLabel exportToExcelLabel;
    private javax.swing.JButton exportToOlympButton;
    private javax.swing.JLabel exportToOlympLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton loadNewDataButton;
    private javax.swing.JButton loadOldDataButton;
    private javax.swing.JComboBox monthSelectionComboBox;
    private javax.swing.JLabel numberOfLunchiesLabel;
    private javax.swing.JLabel numberOfLunchiesLabelShowing;
    private javax.swing.JTextField pathToExcelData;
    private javax.swing.JTextField pathToNewData;
    private javax.swing.JLabel pathToNewDataLabel;
    private javax.swing.JTextField pathToOlympExport;
    private javax.swing.JTextField pathToOriginalData;
    private javax.swing.JLabel pathToOriginalDataLabel;
    private javax.swing.JComboBox selectedDayComboBox;
    private javax.swing.JLabel workingDayLabel;
    private javax.swing.JLabel workingMonthLabel;
    // End of variables declaration//GEN-END:variables
}
